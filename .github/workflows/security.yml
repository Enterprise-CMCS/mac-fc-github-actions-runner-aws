name: Run security scans

on:
  workflow_dispatch: # this effectively disables the workflow for now since it's an example only

permissions:
  id-token: write

jobs:
  # This job is for scan tools that require a built Docker image
  build-and-test-image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and export
        uses: docker/build-push-action@v6
        with:
          context: .
          load: true
          tags: security:latest
          cache-from: type=gha # use the GitHub Cache API
          cache-to: type=gha,mode=max
          # outputs: type=docker,dest=/tmp/myimage.tar  # use this if we need to share the image between jobs

      # Trivy -------------

      - name: Get Trivy template
        run: curl --fail --show-error --output asff.tpl https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/asff.tpl

      # tool output directories should follow the format 'scans/{tool name}' to avoid naming collisions
      - name: Make Trivy directory
        run: mkdir -p scans/trivy

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: security:latest
          format: template
          template: "@asff.tpl"
          ignore-unfixed: true
          vuln-type: "os,library"
          output: scans/trivy/trivy-asff.json
        env:
          # these are required by the Trivy template
          AWS_REGION: us-east-1
          AWS_ACCOUNT_ID: "037370603820"

      - name: Reformat Trivy ASFF # see https://github.com/aquasecurity/trivy/blob/8ad9b8a939a0001a07ef46faa2686d3f115f0754/docs/tutorials/integrations/aws-security-hub.md
        run: jq '.Findings' scans/trivy/trivy-asff.json > /tmp/tmp.json && mv  /tmp/tmp.json scans/trivy/trivy-asff.json

      - name: Upload Trivy ASFF
        uses: ./.github/actions/upload-asff
        with:
          asff-directory-path: scans/trivy
          company-name: Aquasecurity
          product-name: Trivy
          oidc-iam-role-arn: ${{ secrets.OIDC_IAM_ROLE_ARN }}

      # Dockle -------------

      - name: Make Dockle directory
        run: mkdir -p scans/dockle

      - name: Run Dockle
        uses: docker://goodwithtech/dockle:latest
        with:
          args: -f sarif -o scans/dockle/dockle.json security:latest

      - name: Convert Dockle sarif to HDF
        uses: mitre/saf_action@v1
        with:
          command_string: "convert sarif2hdf -i scans/dockle/dockle.json -o scans/dockle/dockle-hdf" # the converter adds the .json suffix to the output

      - name: Convert Dockle HDF to ASFF
        uses: mitre/saf_action@v1
        with:
          # 'saf convert:hdf2asff' creates a new folder for the output with 1 or more zero-indexed files named `asff.p{index}.json, e.g. 'asff.p0.json'
          command_string: "convert hdf2asff -i scans/dockle/dockle-hdf.json -a 037370603820 -r us-east-1 -t dockle -o scans/dockle/asff"

      - name: Upload Dockle ASFF
        uses: ./.github/actions/upload-asff
        with:
          asff-directory-path: scans/dockle/asff
          company-name: Goodwith
          product-name: Dockle
          oidc-iam-role-arn: ${{ secrets.OIDC_IAM_ROLE_ARN }}

  run-inspec:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout # required for use of the local composite action below
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-to-assume: ${{ secrets.OIDC_IAM_ROLE_ARN }}

      - name: Install Inspec
        run: curl --fail --show-error https://omnitruck.chef.io/install.sh | sudo bash -s -- -P inspec

      - name: Run Inspec profile
        run: inspec exec https://github.com/Staggerlee011/s3-bp-benchmark/archive/master.tar.gz -t aws:// --input s3_name=aws-cms-oit-iusg-spe-cmcs-macbis-dev-tf-state-us-east-1 --reporter=cli json:scans/inspec/hdf/inspec_hdf.json --chef-license accept

      - name: Convert Inspec HDF to ASFF
        uses: mitre/saf_action@v1
        with:
          command_string: "convert hdf2asff -i scans/inspec/hdf/inspec_hdf.json -a 037370603820 -r us-east-1 -t inspec -o scans/inspec/asff"

      - name: Upload Inspec ASFF
        uses: ./.github/actions/upload-asff
        with:
          asff-directory-path: scans/inspec/asff
          company-name: Chef
          product-name: Inspec
          oidc-iam-role-arn: ${{ secrets.OIDC_IAM_ROLE_ARN }}

  # Tools that require self-hosted runners should be run after this job
  start-runners:
    name: Provision self-hosted runners
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-to-assume: ${{ secrets.OIDC_IAM_ROLE_ARN }}

      - name: Scale up ECS service
        uses: Enterprise-CMCS/ecs-scale-service@main
        with:
          cluster: gh-runner-6d81a626-1844-5df5-a3e3-cbbbeab84233
          service: gh-runner-6d81a626-1844-5df5-a3e3-cbbbeab84233
          desired-count: 1

  run-sonarqube:
    needs: start-runners
    runs-on: self-hosted
    steps:
      # Set up prerequisites -------

      - name: Checkout
        uses: actions/checkout@v4

      - name: Get branch name
        shell: bash
        run: echo "::set-output name=branch-name::${GITHUB_REF#refs/heads/}"
        id: get-branch-name

      - name: Cache AWS CLI
        uses: actions/cache@v4
        id: cache-aws-cli
        with:
          path: aws
          key: ${{ runner.os }}-awscli-exe-linux-x86_64

      - name: Download AWS CLI
        if: steps.cache-aws-cli.outputs.cache-hit != 'true'
        run: |
          curl --fail --show-error --silent "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip

      - name: Install AWS CLI # see https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html
        run: |
          mkdir -p "$HOME/.local/bin"
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          ./aws/install -i "$HOME" -b "$HOME/.local/bin"

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 16

      - name: Create SonarQube directory
        run: mkdir sonar_scanner

      - name: Cache SonarQube
        uses: actions/cache@v4
        id: cache-sonarqube
        with:
          path: sonar_scanner
          key: ${{ runner.os }}-sonar-scanner-cli-4.7.0.2747

      - name: Install SonarQube
        if: steps.cache-sonarqube.outputs.cache-hit != 'true'
        run: |
          curl --fail --show-error --silent --location --output sonar_scanner/sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.7.0.2747-linux.zip  \
          && unzip sonar_scanner/sonar-scanner.zip -d sonar_scanner

      - name: Cache SonarQube scanner binaries
        uses: actions/cache@v4
        with:
          path: /home/runner/.sonar/cache
          key: ${{ runner.os }}-sonarqube

      # Run SonarQube -------

      - name: SonarQube scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: sonar_scanner/sonar-scanner-4.7.0.2747-linux/bin/sonar-scanner -Dsonar.projectKey=mac-fc-github-actions-runner-aws

      - name: Run SAF CLI on SonarQube
        uses: mitre/saf_action@v1
        with:
          command_string: "convert sonarqube2hdf -a ${{ secrets.SONAR_TOKEN }} -u ${{ secrets.SONAR_HOST_URL }} -n mac-fc-github-actions-runner-aws -o sonar_scanner/sonarqube_hdf.json -b ${{ steps.get-branch-name.outputs.branch-name }}"

      - name: Convert SonarQube HDF to ASFF
        uses: mitre/saf_action@v1
        with:
          command_string: "convert hdf2asff -i sonar_scanner/sonarqube_hdf.json -a 037370603820 -r us-east-1 -t sonarqube -o sonar_scanner/asff"

      - name: Upload SonarQube ASFF
        uses: ./.github/actions/upload-asff
        with:
          asff-directory-path: sonar_scanner/asff
          company-name: SonarQube
          product-name: SonarQube
          oidc-iam-role-arn: ${{ secrets.OIDC_IAM_ROLE_ARN }}

  stop-runners:
    name: Deprovision self-hosted runners
    runs-on: ubuntu-latest
    if: always()
    needs: [start-runners, run-sonarqube]
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-to-assume: ${{ secrets.OIDC_IAM_ROLE_ARN }}

      - name: Scale down ECS service
        uses: Enterprise-CMCS/ecs-scale-service@main
        with:
          cluster: gh-runner-6d81a626-1844-5df5-a3e3-cbbbeab84233
          service: gh-runner-6d81a626-1844-5df5-a3e3-cbbbeab84233
          desired-count: 0

  slack-notification:
    name: Slack notification
    needs: [build-and-test-image, run-inspec] # set "needs" to all previous jobs to make sure this job runs last
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check for Slack webhook secret
        id: check-webhook-secret
        run: echo "secret=${{ secrets.SLACK_WEBHOOK_URL }}" >> $GITHUB_OUTPUT

      - name: Get workflow conclusion # conclusion is stored in env.WORKFLOW_CONCLUSION
        if: steps.check-webhook-secret.outputs.secret
        uses: technote-space/workflow-conclusion-action@v3

      - name: Set conclusion emoji
        id: set-emoji
        if: steps.check-webhook-secret.outputs.secret
        # for valid conclusions, see https://github.com/technote-space/workflow-conclusion-action/blob/main/src/constant.ts
        run: |
          EMOJI=$(
            case "${{ env.WORKFLOW_CONCLUSION }}" in
              ("neutral")
                echo ":large_yellow_square"
                ;;
              ("skipped")
                echo ":fast_forward"
                ;;
              ("success")
                echo ":white_check_mark:"
                ;;
              ("cancelled")
                echo ":no_entry_sign:"
                ;;
              ("timed_out")
                echo ":stopwatch:"
                ;;
              ("action_required")
                echo ":exclamation:"
                ;;
              ("failure")
                echo ":x:"
                ;;
            esac
          )
          echo "emoji=$EMOJI" >> $GITHUB_OUTPUT

      - name: Send Slack notification
        if: steps.check-webhook-secret.outputs.secret
        uses: slackapi/slack-github-action@v2.0.0
        with:
          payload: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "Security scan workflow #${{github.run_number}} ",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "${{ steps.set-emoji.outputs.emoji }} Result: ${{ env.WORKFLOW_CONCLUSION }}"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|View this workflow run>"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
